import os
import json
import secrets
from datetime import datetime
from flask import Flask, render_template, request, session
from flask_socketio import SocketIO, emit, join_room, leave_room

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)
socketio = SocketIO(app)

KEYS_FILE = "access_keys.json"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
contracts = [
    {"id": 1, "title": "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –î–æ–ª–≥–∞", "description": "–õ–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ä—É–ª—å –î–æ–ª–≥–∞ –≤ –¢–µ–º–Ω–æ–π –î–æ–ª–∏–Ω–µ.", "reward": "50000 RU", "status": "active", "assigned_to": None},
    {"id": 2, "title": "–ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞", "description": "–ù–∞–π—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç '–ù–æ—á–Ω–∞—è –ó–≤–µ–¥–∞' –Ω–∞ –°–≤–∞–ª–∫–µ.", "reward": "–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ", "status": "active", "assigned_to": None},
    {"id": 3, "title": "–ó–∞—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤–∞ –º—É—Ç–∞–Ω—Ç–æ–≤", "description": "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–æ–≤–æ –∫—Ä–æ–≤–æ—Å–æ—Å–æ–≤ –Ω–∞ –ê–≥—Ä–æ–ø—Ä–æ–º–µ.", "reward": "10000 RU + –µ–¥–∞", "status": "completed", "assigned_to": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫-1"}
]

dossiers = {}

current_channel_frequency = "142.7 –ú–ì—Ü"
pending_requests = []
next_request_id = 1
active_operatives = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ ---
ACCESS_KEYS = {}
KEY_TO_ROLE = {}

def generate_access_keys():
    global ACCESS_KEYS, KEY_TO_ROLE
    ACCESS_KEYS = {
        "operative": [secrets.token_hex(4) for _ in range(4)],
        "commander": [secrets.token_hex(4)],
        "client": [secrets.token_hex(4) for _ in range(5)],
        "syndicate": ["SYNDICATE_OVERRIDE_KEY"]
    }
    KEY_TO_ROLE = {}
    for role, keys in ACCESS_KEYS.items():
        for key in keys:
            KEY_TO_ROLE[key] = role

def save_access_keys():
    with open(KEYS_FILE, 'w') as f:
        json.dump(ACCESS_KEYS, f, indent=4)

def load_access_keys():
    global ACCESS_KEYS, KEY_TO_ROLE
    if os.path.exists(KEYS_FILE):
        try:
            with open(KEYS_FILE, 'r') as f:
                content = f.read().strip()
                if not content:
                    raise ValueError("–§–∞–π–ª –∫–ª—é—á–µ–π –ø—É—Å—Ç")
                ACCESS_KEYS = json.loads(content)
        except (json.JSONDecodeError, ValueError) as e:
            print(f"[WARNING] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {KEYS_FILE}: {e}. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.")
            generate_access_keys()
            save_access_keys()
    else:
        generate_access_keys()
        save_access_keys()

    KEY_TO_ROLE = {}
    for role, keys in ACCESS_KEYS.items():
        for key in keys:
            KEY_TO_ROLE[key] = role

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_access_keys()

ROLE_PERMISSIONS = {
    "guest": ["help", "login", "clear"],
    "operative": ["help", "login", "clear", "contracts", "sendmsg"],
    "commander": ["help", "login", "clear", "contracts", "setchannel", "ops_online"],
    "client": ["help", "login", "clear", "mycontracts", "requestorder"],
    "syndicate": ["help", "login", "clear", "contracts", "setchannel",
                  "requestorder", "viewrequests", "acceptrequest", "declinerequest",
                  "assignorder", "sendmsg", "ops_online", "exit", "resetkeys", "viewkeys"]
}

@app.route('/')
def index():
    if 'role' not in session:
        session['role'] = 'guest'
    return render_template('index.html')

@socketio.on('connect')
def on_connect():
    current_role = session.get('role', 'guest')
    print(f"Client connected: {request.sid}, role: {current_role}")
    emit('update_ui_state', {'role': current_role, 'channel_frequency': current_channel_frequency})

    if current_role == 'operative':
        display_id = f"operative_{request.sid[:4]}"
        active_operatives[request.sid] = display_id
        join_room(request.sid)
        print(f"Operative {display_id} joined room.")
    elif current_role == 'syndicate':
        join_room('syndicate_room')
        print(f"Syndicate joined syndicate_room.")

@socketio.on('disconnect')
def on_disconnect():
    print(f"Client disconnected: {request.sid}")
    if request.sid in active_operatives:
        display_id = active_operatives.pop(request.sid)
        leave_room(request.sid)
        print(f"Operative {display_id} left room.")
    if session.get('role') == 'syndicate':
        leave_room('syndicate_room')
        print("Syndicate left syndicate_room.")

@socketio.on('terminal_input')
def handle_terminal_input(data):
    global current_channel_frequency, next_request_id, ACCESS_KEYS, KEY_TO_ROLE
    command_full = data['command'].strip()
    command_parts = command_full.split(" ", 1)
    base_command = command_parts[0].lower()
    args = command_parts[1] if len(command_parts) > 1 else ""

    current_role = session.get('role', 'guest')
    output = ""

    if base_command not in ROLE_PERMISSIONS.get(current_role, []):
        output = (f"üö´ –û–¢–ö–ê–ó –í –î–û–°–¢–£–ü–ï üö´\n"
                  f"–ö–æ–º–∞–Ω–¥–∞ '{base_command}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ ({current_role}).\n"
                  f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ 'login <–∫–ª—é—á>'.\n")
        emit('terminal_output', {'output': output + '\n'})
        return

    if base_command == "help":
        output = f"üìñ --- –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ({current_role.capitalize()}) ---\n"
        command_descriptions = {
            "help": "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "login": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞ (login <–∫–ª—é—á>)",
            "clear": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞",
            "contracts": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã",
            "sendmsg": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫—É (sendmsg <–∫–æ–º—É> <—Å–æ–æ–±—â–µ–Ω–∏–µ>)",
            "setchannel": "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏ (setchannel <—á–∞—Å—Ç–æ—Ç–∞>) (—Ç–æ–ª—å–∫–æ –ö–æ–º–∞–Ω–¥–∏—Ä/–°–∏–Ω–¥–∏–∫–∞—Ç)",
            "mycontracts": "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (—Ç–æ–ª—å–∫–æ –ó–∞–∫–∞–∑—á–∏–∫)",
            "requestorder": "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (requestorder <–æ–ø–∏—Å–∞–Ω–∏–µ>) (—Ç–æ–ª—å–∫–æ –ó–∞–∫–∞–∑—á–∏–∫/–°–∏–Ω–¥–∏–∫–∞—Ç)",
            "viewrequests": "–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "acceptrequest": "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ (acceptrequest <id>) (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "declinerequest": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ (declinerequest <id>) (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "assignorder": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫—É/–∫–æ–º–∞–Ω–¥–∏—Ä—É (assignorder <id_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞> <–∫—Ç–æ>) (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "ops_online": "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–∑—ã–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –ö–æ–º–∞–Ω–¥–∏—Ä/–°–∏–Ω–¥–∏–∫–∞—Ç)",
            "resetkeys": "–°–±—Ä–æ—Å–∏—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "viewkeys": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –°–∏–Ω–¥–∏–∫–∞—Ç)",
            "exit": "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å"
        }
        for cmd in sorted(ROLE_PERMISSIONS[current_role]):
            if cmd in command_descriptions:
                output += f"üîπ –ö–æ–º–∞–Ω–¥–∞: {cmd}\n  –û–ø–∏—Å–∞–Ω–∏–µ: {command_descriptions[cmd]}\n\n"

    elif base_command == "login":
        if not args:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: login <–∫–ª—é—á_–¥–æ—Å—Ç—É–ø–∞>\n"
        else:
            if args == ACCESS_KEYS["syndicate"][0]:
                session['role'] = "syndicate"
                join_room('syndicate_room')
                output = "üëë –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –†–æ–ª—å: –°–ò–ù–î–ò–ö–ê–¢ (–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†).\n"
                socketio.emit('update_ui_state', {'role': session['role'], 'channel_frequency': current_channel_frequency})
            else:
                activated_role = KEY_TO_ROLE.get(args)
                if activated_role:
                    if activated_role == "syndicate":
                        output = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞.\n"
                    else:
                        session['role'] = activated_role
                        output = f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –†–æ–ª—å: {activated_role.upper()}.\n"
                        socketio.emit('update_ui_state', {'role': session['role'], 'channel_frequency': current_channel_frequency})
                        if activated_role == 'operative':
                            display_id = f"operative_{request.sid[:4]}"
                            active_operatives[request.sid] = display_id
                            join_room(request.sid)
                            print(f"Operative {display_id} joined room.")
                else:
                    output = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n"

    elif base_command == "contracts":
        output = "üìã --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã ---\n"
        if not contracts:
            output += "üö´ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
        else:
            for contract in contracts:
                assigned_to_info = f"  üßë‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {contract['assigned_to'] or '–ù–∏–∫–æ–º—É'}\n" if contract['assigned_to'] else ""
                output += (
                    f"üÜî ID: {contract['id']}\n"
                    f"  üìå –ù–∞–∑–≤–∞–Ω–∏–µ: '{contract['title']}'\n"
                    f"  üí∞ –ù–∞–≥—Ä–∞–¥–∞: {contract['reward']}\n"
                    f"  üìä –°—Ç–∞—Ç—É—Å: {contract['status'].capitalize()}\n"
                    f"{assigned_to_info}\n"
                )

    elif base_command == "clear":
        output = "<CLEAR_TERMINAL>"

    elif base_command == "sendmsg" and current_role == "operative":
        parts = args.split(" ", 1)
        if len(parts) < 2:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sendmsg <–∫–æ–º—É> <—Å–æ–æ–±—â–µ–Ω–∏–µ> (–∫–æ–º—É: 'all' –∏–ª–∏ 'operative_<id>')\n"
        else:
            target = parts[0].lower()
            message = parts[1]
            sender_display_id = active_operatives.get(request.sid, f"operative_{request.sid[:4]}")

            if target == "all":
                for sid_target in active_operatives.keys():
                    emit('terminal_output', {'output': f"[{sender_display_id.upper()} -> –í–°–ï–ú]: {message}\n"}, room=sid_target)
                output = "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫–∞–º.\n"
            elif target.startswith("operative_"):
                target_sid = None
                for sid_key, display_id_val in active_operatives.items():
                    if display_id_val == target:
                        target_sid = sid_key
                        break

                if target_sid:
                    emit('terminal_output', {'output': f"[{sender_display_id.upper()} -> {target.upper()}]: {message}\n"}, room=target_sid)
                    output = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {target.upper()}.\n"
                else:
                    output = f"‚ùå –û—à–∏–±–∫–∞: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫ '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.\n"
            else:
                output = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'all' –∏–ª–∏ 'operative_<id>'.\n"

    elif base_command == "setchannel" and current_role in ["commander", "syndicate"]:
        if not args:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: setchannel <–Ω–æ–≤–∞—è_—á–∞—Å—Ç–æ—Ç–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.0 –ú–ì—Ü)\n"
        else:
            current_channel_frequency = args.strip()
            output = f"üì° –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {current_channel_frequency}\n"
            socketio.emit('update_ui_state', {'role': current_role, 'channel_frequency': current_channel_frequency})

    elif base_command == "ops_online" and current_role in ["commander", "syndicate"]:
        num_online_ops = len(active_operatives)
        if num_online_ops > 0:
            output = f"üü¢ --- –ê–ö–¢–ò–í–ù–´–ï –û–ü–ï–†–ê–¢–ò–í–ù–ò–ö–ò ({num_online_ops}) ---\n"
            for sid, display_id in active_operatives.items():
                output += f"- {display_id} (SID: {sid[:4]})\n"
        else:
            output = "üö´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫–æ–≤ –Ω–µ—Ç.\n"

    elif base_command == "mycontracts" and current_role == "client":
        client_contracts = [c for c in contracts if c['status'] != 'completed']
        if client_contracts:
            output = "üìã --- –í–∞—à–∏ –ê–∫—Ç–∏–≤–Ω—ã–µ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã ---\n"
            for contract in client_contracts:
                output += (
                    f"üÜî ID: {contract['id']}\n"
                    f"  üìå –ù–∞–∑–≤–∞–Ω–∏–µ: '{contract['title']}'\n"
                    f"  üìä –°—Ç–∞—Ç—É—Å: {contract['status'].capitalize()}\n\n"
                )
        else:
            output = "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.\n"

    elif base_command == "requestorder" and current_role in ["client", "syndicate"]:
        if not args:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: requestorder <–∫—Ä–∞—Ç–∫–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ_–∑–∞–∫–∞–∑–∞>\n"
        else:
            request_id = next_request_id
            pending_requests.append({
                "id": request_id,
                "client_sid": request.sid,
                "description": args,
                "status": "pending",
                "timestamp": datetime.now().isoformat()
            })
            next_request_id += 1
            output = (
                f"üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ ID:{request_id} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.\n"
            )
            if current_role == "client":
                socketio.emit('terminal_output', {'output': f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ó–ê–ö–ê–ó ID:{request_id} –æ—Ç –ó–∞–∫–∞–∑—á–∏–∫–∞ ({request.sid[:4]}). –û–ø–∏—Å–∞–Ω–∏–µ: '{args}'\n"}, room='syndicate_room')
            elif current_role == "syndicate":
                output = f"üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ ID:{request_id} —Å–æ–∑–¥–∞–Ω –°–∏–Ω–¥–∏–∫–∞—Ç–æ–º. –û–ø–∏—Å–∞–Ω–∏–µ: '{args}'\n"

    elif base_command == "viewrequests" and current_role == "syndicate":
        output = "üìã --- –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–ü–†–û–°–´ –ù–ê –ó–ê–ö–ê–ó ---\n"
        if not pending_requests:
            output += "üö´ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        else:
            for req in pending_requests:
                output += (
                    f"üÜî ID: {req['id']}\n"
                    f"  üìå –û–ø–∏—Å–∞–Ω–∏–µ: '{req['description']}'\n"
                    f"  üìä –°—Ç–∞—Ç—É—Å: {req['status'].capitalize()}\n"
                    f"  ‚è∞ –í—Ä–µ–º—è: {req['timestamp']}\n"
                    f"  üÜî –û—Ç –∫–ª–∏–µ–Ω—Ç–∞ SID: {req['client_sid'][:4]}\n\n"
                )

    elif base_command == "acceptrequest" and current_role == "syndicate":
        try:
            req_id = int(args.strip())
            req_found = None
            for req in pending_requests:
                if req['id'] == req_id:
                    req_found = req
                    break

            if req_found:
                pending_requests.remove(req_found)
                new_contract_id = max([c['id'] for c in contracts]) + 1 if contracts else 1
                contracts.append({
                    "id": new_contract_id,
                    "title": f"–ó–∞–∫–∞–∑: {req_found['description'][:30]}...",
                    "description": req_found['description'],
                    "reward": "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è",
                    "status": "active",
                    "assigned_to": None
                })
                output = (
                    f"‚úÖ –ó–∞–ø—Ä–æ—Å ID:{req_id} –ø—Ä–∏–Ω—è—Ç.\n"
                    f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç ID:{new_contract_id}.\n"
                )
                if req_found.get('client_sid'):
                    emit('terminal_output', {'output': f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –í–∞—à –∑–∞–ø—Ä–æ—Å ID:{req_id} –ø—Ä–∏–Ω—è—Ç. –ö–æ–Ω—Ç—Ä–∞–∫—Ç ID:{new_contract_id} —Å–æ–∑–¥–∞–Ω.\n"}, room=req_found['client_sid'])
            else:
                output = f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å —Å ID:{req_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö.\n"
        except ValueError:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: acceptrequest <ID_–∑–∞–ø—Ä–æ—Å–∞>\n"

    elif base_command == "declinerequest" and current_role == "syndicate":
        try:
            req_id = int(args.strip())
            req_found = None
            for req in pending_requests:
                if req['id'] == req_id:
                    req_found = req
                    break

            if req_found:
                pending_requests.remove(req_found)
                output = f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å ID:{req_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                if req_found.get('client_sid'):
                    emit('terminal_output', {'output': f"[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï] –í–∞—à –∑–∞–ø—Ä–æ—Å ID:{req_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"}, room=req_found['client_sid'])
            else:
                output = f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å —Å ID:{req_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö.\n"
        except ValueError:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: declinerequest <ID_–∑–∞–ø—Ä–æ—Å–∞>\n"

    elif base_command == "assignorder" and current_role == "syndicate":
        parts = args.split(" ", 1)
        if len(parts) < 2:
            output = "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: assignorder <ID_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞> <–∫–æ–º—É>\n"
        else:
            try:
                contract_id = int(parts[0])
                assignee = parts[1].strip()

                contract_found = None
                for c in contracts:
                    if c['id'] == contract_id:
                        contract_found = c
                        break

                if not contract_found:
                    output = f"‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å ID:{contract_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                else:
                    contract_found['assigned_to'] = assignee
                    output = f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç ID:{contract_id} –Ω–∞–∑–Ω–∞—á–µ–Ω {assignee}.\n"
            except ValueError:
                output = "‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"

    elif base_command == "exit":
        session['role'] = 'guest'
        output = "üîå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ –≥–æ—Å—Ç—è.\n"
        socketio.emit('update_ui_state', {'role': 'guest', 'channel_frequency': current_channel_frequency})

    elif base_command == "resetkeys" and current_role == "syndicate":
        generate_access_keys()
        save_access_keys()
        output = "--- üîë –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ: ---\n"
        for role, keys in ACCESS_KEYS.items():
            if role != "syndicate":
                output += f"{role.upper()}: {', '.join(keys)}\n"
        output += "‚ö†Ô∏è –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.\n"

    elif base_command == "viewkeys" and current_role == "syndicate":
        output = "--- üîë –¢–ï–ö–£–©–ò–ï –ê–ö–¢–ò–í–ù–´–ï –ö–õ–Æ–ß–ò –î–û–°–¢–£–ü–ê ---\n"
        for role, keys in ACCESS_KEYS.items():
            if role == "guest":
                continue
            output += f"{role.upper()}: {', '.join(keys)}\n"
        output += "--------------------------------------\n"

    else:
        output = (f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{base_command}' –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ ({current_role}).\n"
                  "–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n")

    emit('terminal_output', {'output': output + '\n'})

if __name__ == '__main__':
    print("\n--- –ö–õ–Æ–ß–ò –î–û–°–¢–£–ü–ê ---")
    for role, keys in ACCESS_KEYS.items():
        print(f"{role.upper()}: {', '.join(keys)}")
    print("---------------------\n")
    socketio.run(app, debug=True, allow_unsafe_werkzeug=True)